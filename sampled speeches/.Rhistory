knowl_matrix[p,] <- beliefs[person,]
p <- p + 1
}
}
# *learning #####
# Setting up the superior group and its knowledge for the code to learn from it
# As per the paper, org code learns from the majority vote of superior
# group.
for(dimension in 1:m) {
result <- getvote(knowl_matrix[,dimension])
vote <- result[1]
k <- result[2]
if(runif(1) > ((1- p2)^k)) {
org_code[dimension] <- vote
}
}
}
# end: code learning from the individuals
}
# recording results  ======
# For now a crude but working version.
knowl_code <- sum(org_code == external_reality)
OUTPUT[c_p1, c_p2] <- OUTPUT[c_p1, c_p2] + (knowl_code/m)
}
}
}
OUTPUT <- OUTPUT/iterations  # taking the average
# END OF LINE
View(OUTPUT)
##data wrangling
#for p3 = 0
output_df <- as.data.frame(OUTPUT)
View(output_df)
output_df$average_equilibrium_knowledge <- rowMeans(output_df)
View(output_df)
output_df$p1 <- P1_list
View(output_df)
output_long <- pivot_longer(output_df, 1:3, names_to = "p2", values_to = "equilibrium_knowledge" )
View(output_long)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = average_equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Average Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = average_equilibrium_knowledge, group = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Average Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
View(OUTPUT)
View(OUTPUT)
View(output_long)
output_long$p2 <- rename(output_long[p2, ], 0.1 = V1, 0.5 = V2, 0.9 = V3)
output_long$p2 <- rename(output_long[p2, ], 0.1 == V1, 0.5 == V2, 0.9 == V3)
output_long$p2 <- rename(output_long[p2, ], 0.1 == "V1", 0.5 == "V2", 0.9 == "V3")
output_long$p2 <- recode(output_long[p2, ], 0.1 == "V1", 0.5 == "V2", 0.9 == "V3")
output_long$p2 <- recode(output_long[p2, ], 0.1 = "V1", 0.5 = "V2", 0.9 = "V3")
output_long$p2 <- recode(output_long$p2, 0.1 = "V1", 0.5 = "V2", 0.9 = "V3")
output_long$p2 <- recode(output_long$p2, 0.1 = "V1", 0.5 = "V2", 0.9 = "V3")
library(dplyr)
output_long$p2 <- recode(output_long[p2, ], 0.1 = "V1", 0.5 = "V2", 0.9 = "V3")
output_long$p2 <- recode(output_long[p2, ], "0.1" = "V1", "0.5" = "V2", "0.9" = "V3")
output_long$p2 <- recode(output_long$p2, "0.1" = "V1", "0.5" = "V2", "0.9" = "V3")
View(output_long)
output_long$p2 <- recode(output_long$p2, "0.1" = "V1", "0.5" = "V2", "0.9" = "V3")
View(output_long)
output_long$p2 <- recode(output_long$p2, "0.1" = "V1", "0.5" = "V2", "0.9" = "V3")
output_long$p2 <- recode(output_long$p2, "0.1" = "V1", "0.5" = "V2", "0.9" = "V3")
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = average_equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Average Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Average Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
levels(output_long$p2)
output_df <- rename(output_df[, 1:3], "0.1" = "V1", "0.5" = "V2", "0.9" = "V3")
View(output_df)
output_df$p1 <- P1_list
output_long <- pivot_longer(output_df, 1:3, names_to = "p2", values_to = "equilibrium_knowledge" )
View(output_long)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Average Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 80 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 200 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
# Plot with ggplot
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 200 Iterations.",
color = "Code Learning Rate (p3)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
ggplot(output_long, aes(x = p1, y = equilibrium_knowledge, color = factor(p2))) +
geom_line(size = 1) +
geom_point(size = 0.8) +
labs(title = "Effect of Learning Rates (p1, p2) on Average Equilibrium Knowledge",
subtitle = "Comparing different Code Learning Rates on Equilibrium Knowledge over Socialization Rate.",
x = "Socialization Rate (p1)",
y = "Average Equilibrium Knowledge",
caption = "M = 30; N = 50; 200 Iterations.",
color = "Code Learning Rate (p2)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.title = element_text(size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 9),
plot.caption = element_text(hjust = 0.5, face = "italic", size = 10),
legend.title = element_text(size = 12),
legend.position = "top"
)
#merged dataset
setwd("C:/Users/hornu/OneDrive/Master Social Scientific Data Analysis/Courses/SIMM71 - Computational Content Analysis for the Social Sciences/Pragmatism Exam")
##Council of Europe
library(httr)
library(rvest)
library(stringr)
library(textcat) #for detecting non english text
library(openxlsx)
#access URL
url <- "https://www.coe.int/en/web/secretary-general/speeches-and-op-eds?p_p_id=com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_redirect=%2Fen%2Fweb%2Fsecretary-general%2Fspeeches-and-op-eds%3Fp_p_id%3Dcom_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_redirect%3D%252Fen%252Fweb%252Fsecretary-general%252Fspeeches-and-op-eds%26_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_delta%3D20%26p_r_p_resetCur%3Dfalse%26_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_cur%3D5&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_delta=20&p_r_p_resetCur=false&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_cur=2#p_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW"
website <- read_html(url)
##I use the same link structure for all pages including the first page!
#https://www.coe.int/en/web/secretary-general/speeches-and-op-eds?p_p_id=com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_redirect=%2Fen%2Fweb%2Fsecretary-general%2Fspeeches-and-op-eds&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_delta=20&p_r_p_resetCur=false&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_cur=2#p_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbWalso works.
beg_url <- "https://www.coe.int/en/web/secretary-general/speeches-and-op-eds?p_p_id=com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_redirect=%2Fen%2Fweb%2Fsecretary-general%2Fspeeches-and-op-eds%3Fp_p_id%3Dcom_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_redirect%3D%252Fen%252Fweb%252Fsecretary-general%252Fspeeches-and-op-eds%26_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_delta%3D20%26p_r_p_resetCur%3Dfalse%26_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_cur%3D5&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_delta=20&p_r_p_resetCur=false&_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW_cur="
end_url <- "#p_com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_JMmT2OuzAtbW"
##First  create a vector of numbers 1-11.
custom_pages <- c(1:11)
##create an empty list:
empty_list <- list()
##Then, let's write a for loop for R to create links for each number in the vector.
for (i in custom_pages) { #Here we are saying for each item in the vector we created with numbers 1-11
links <- print(paste0(beg_url, i, end_url))##Then, paste 'i' (the number) in between beg_url and end_url
empty_list <- rbind(empty_list, links) } #It's empty. Let's fill it by telling R to save each link at the end of each iteration of the for loop...
empty_list
list_of_links <- empty_list
list_of_dfs <- list()
#loop...
for (i in list_of_links[1:11]){ ##I am only doing all 11 pages here...
url <- i ##Just for clarity, I am renaming 'i' to be a url
website <- read_html(i) ##Remember to read the html from each page! Then we can get the title, price, etc.
# Pulling the titles
titles <- website %>%
html_elements("h3 a") %>%
html_text2()
# Pulling the link
link <- website %>%
html_elements("h3 a") %>%
html_attr("href")
#Because the location and date information is not consistently present above the title on all pages in the loop: let's apply the lapply() function to test every single element for the presence of date and location.
elements <- website %>%
html_elements("div.element.clearfix")
data <- lapply(elements, function(element) {
# Extract date
date_element <- element %>% html_element("span.date")
date <- ifelse(is.null(date_element), NA, date_element %>% html_text())
# Extract location
location_element <- element %>% html_element("span.location")
location <- ifelse(is.null(location_element), NA, location_element %>% html_text())
# Check if date is NA and location is not NA
if (is.na(date) && !is.na(location)) {
# Try to detect if the text contains a date using regex
if (grepl("\\b\\d{1,4}\\b", location)) {
date <- location
location <- NA
}
}
# Check for additional information in date and move it to location if there is NA
if (is.na(location) && !is.na(date)) {
additional_info <- str_match(date, "\\((.*?)\\)")
if (!is.null(additional_info) && !is.na(additional_info[2])) {
location <- additional_info[2]
date <- gsub("\\(.*?\\)", "", date)
}
}
return(data.frame(date = date, location = location, stringsAsFactors = FALSE))
})
result <- do.call(rbind, data)
# Create a data frame with title, date, and location
page_df <- data.frame(
title = titles,
link = link,
date = result$date,
location = result$location,
stringsAsFactors = FALSE
)
list_of_dfs <- rbind(list_of_dfs, page_df)
print(paste0("Finished collecting from link ", i)) ##I have added a short message here to print in the console, so we know it's running
}
###inspecting data
## manual data cleaning // swap the dates with the location in row 76 and 81 because they were already swaped on the webpage before scraping
# Swap date and location in row 81
list_of_dfs[81, c("date", "location")] <- list_of_dfs[81, c("location", "date")]
# Swap date and location in row 76
list_of_dfs[76, c("date", "location")] <- list_of_dfs[76, c("location", "date")]
# Set a seed for reproducibility
#set.seed(111)
# Randomly sample 10 speeches from the scraped data
sampled_links <- list_of_dfs$link#[sample(nrow(list_of_dfs), 10)]   ##I'll sampe after collecting the data
# Create a list to store scraped texts
sampled_speeches <- list()
for (i in sampled_links) {
# Access the URL for the speech
url <- i
website <- tryCatch({
read_html(url)
}, error = function(e) {
message(paste("Error accessing URL:", url))
return(NULL)
})
if (!is.null(website)) {
# Extract the text of the speech
text <- website %>%
html_elements("div.text") %>%
html_elements("p") %>%
html_text2()
if (length(text) == 0) {
# Alternative structure for some pages
text <- website %>%
html_elements("div.content") %>%
html_elements("p") %>%
html_text2()
}
# Collapse text into a single cohesive string
cohesive_text <- paste(text, collapse = " ")
# Store the result
speech_data <- data.frame(
link = url,
cohesive_text = cohesive_text,
stringsAsFactors = FALSE
)
sampled_speeches <- rbind(sampled_speeches, speech_data)
print(paste("Scraped text for:", url))
}
}
# Extract the first part of the text (before any non-English section)
sampled_speeches$first_part <- str_extract(sampled_speeches$cohesive_text, "^[^*]+")
# Detect language for the first part of the speech
sampled_speeches$language <- textcat(sampled_speeches$first_part)
# Filter for only English texts
sampled_speeches <- sampled_speeches[sampled_speeches$language == "english", ]
# Function to keep only English parts of the text (if there are mixed languages)
keep_english_parts <- function(text) {
# Split text into sentences
sentences <- unlist(str_split(text, "(?<=[.!?])\\s+"))
# Detect language of each sentence
sentence_languages <- textcat(sentences)
# Keep only sentences detected as English
english_sentences <- sentences[sentence_languages == "english"]
# Combine the English sentences back into a cohesive text
paste(english_sentences, collapse = " ")
}
# Apply the function to remove non-English parts of cohesive_text
sampled_speeches$english_only_text <- sapply(sampled_speeches$cohesive_text, keep_english_parts)
# Check if the English-only text column is non-empty and filter them out
sampled_speeches <- sampled_speeches[!sampled_speeches$english_only_text == "", ]
# Merge both dataframes (list_of_dfs with sampled_speeches) based on the link
merged_df <- merge(list_of_dfs, sampled_speeches, by = "link")
#now sample for 10 speeches
set.seed(123)
sampled_speeches <- merged_df[sample(nrow(merged_df), 10), ]
sampled_speeches <- sampled_speeches[, -(5:6)]
View(merged_df)
#merged dataset
setwd("C:/Users/hornu/OneDrive/Master Social Scientific Data Analysis/Courses/SIMM71 - Computational Content Analysis for the Social Sciences/SIMM71---Pragmatism-in-IR/sampled speeches")
#Putin speeches
library(httr)
library(rvest)
library(stringr)
library(openxlsx)
# Base URL for pagination
base_url <- "http://en.kremlin.ru/events/president/transcripts/speeches/page/"
# Number of pages to scrape
num_pages <- 20  # Adjust as needed
# Custom headers to mimic a browser
custom_headers <- c(
"User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
)
# Introduce delays
random_delay <- function() {
Sys.sleep(runif(1, 2, 5))  # Random delay between 2 and 5 seconds
}
# Create a list to store results
list_of_dfs <- list()
for (page in 1:num_pages) {
# Introduce a delay to avoid server blocking
random_delay()
# Construct the URL
url <- paste0(base_url, page)
# Make the GET request with custom headers
response <- GET(url, add_headers(.headers = custom_headers))
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the HTML content
website <- read_html(content(response, as = "text"))
# Extract titles - ensure they are not generic elements like "Categories"
titles <- website %>%
html_elements("h3.hentry__title a span.entry-title") %>%
html_text2()
# Extract links - ensure they correspond to titles
links <- website %>%
html_elements("h3.hentry__title a") %>%
html_attr("href") %>%
paste0("http://en.kremlin.ru", .) # Append base URL for full link
# Extract dates - ensure alignment
dates <- website %>%
html_elements("h3.hentry__title span.hentry__meta time.published") %>%
html_text2()
# Combine data into a data frame
page_df <- data.frame(
title = titles,
link = links,
date = dates,
stringsAsFactors = FALSE
)
list_of_dfs[[page]] <- page_df
print(paste0("Finished scraping page ", page))
} else {
warning(paste("Failed to fetch page", page, "with status code:", status_code(response)))
}
}
# Combine all pages into a single data frame
all_speeches <- do.call(rbind, list_of_dfs)
# Randomly sample 10 speeches from the 'all_speeches' dataframe
set.seed(123)  # Set a seed for reproducibility
sampled_speeches <- all_speeches[sample(nrow(all_speeches), 5), ]
# Scrape the full text of speeches
sampled_speeches$raw_text <- NA
for (i in seq_len(nrow(sampled_speeches))) {
random_delay()  # Add delay to mimic human behavior
try({
# Access the individual speech link
speech_url <- sampled_speeches$link[i]
response <- GET(speech_url, add_headers(.headers = custom_headers))
if (status_code(response) == 200) {
speech_page <- read_html(content(response, as = "text"))
# Extract all <p> tags (the text content of the speech)
full_text <- speech_page %>%
html_elements("p") %>%  # Capture all <p> tags, which contain the speech content
html_text2() %>%        # Extract the text
paste(collapse = " ")   # Combine all <p> text into one single string
# Clean up text (remove extra whitespace)
full_text <- gsub("\\s+", " ", full_text)  # Replace multiple spaces with a single space
sampled_speeches$raw_text[i] <- full_text
print(paste0("Scraped text from speech ", i))
} else {
warning(paste("Failed to fetch speech", i, "with status code:", status_code(response)))
}
}, silent = TRUE)
}
View(all_speeches)
